name: Cross Compile using mingw

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "hunter-dir=${{ github.workspace }}/.hunter" >> "$GITHUB_OUTPUT"
        echo "cmake-version=3.27.9" >> "$GITHUB_OUTPUT"
        echo "cmake-install-dir=/opt/cmake-3.27.9" >> "$GITHUB_OUTPUT"

    - name: Dependencies
      run: |
        sudo apt update
        sudo apt install --yes \
        mingw-w64 \
        mingw-w64-tools \
        ninja-build
        wget --output-document=/tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v${{ steps.strings.outputs.cmake-version }}/cmake-${{ steps.strings.outputs.cmake-version }}-linux-x86_64.sh
        sudo mkdir ${{ steps.strings.outputs.cmake-install-dir }}
        sudo sh /tmp/cmake.sh --skip-license --prefix=${{ steps.strings.outputs.cmake-install-dir }}
        sudo ln --symbolic --force ${{ steps.strings.outputs.cmake-install-dir }}/bin/cmake /usr/local/bin/cmake
        git clone --depth 1 --branch OpenSSL_1_1_1g https://github.com/openssl/openssl.git
        cd openssl
        ./Configure mingw --cross-compile-prefix=i686-w64-mingw32- --prefix=/usr/i686-w64-mingw32
        make
        sudo make install

    - name: Configure CMake
      run: >
        cmake
        -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ github.workspace }}
        -DHUNTER_ROOT=${{ steps.strings.outputs.hunter-dir }}
        --preset default

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}
